html
  head
    style 
      include ../public/css/index.css

    title WEB 2 - LAB 2
  body
    h1 Drugi projekt
    hr
    h2 Cross-site scripting (XSS)
    p U formi za objavu posta unosimo naslov i tekst. Za naslov je već definirana vrijednost te je potrebno bilo koju vrijednost staviti na tekst. Kada objavimo i učitamo objave prikazuju se objave sa sadržajem koji smo ranije unjeli. Kada uključimo ranjivost dešava se to da više ne sanitiziramo unos podataka te su dozvoljeni script tagovi. To znači da će se nakon prikaza objava sa zločudnim kodom pokrenuti zločudna skripta. (Napomena: Skripta je ubačena u HTML ali se iz nekog razloga ne pokreće.) 

    form#postForm
      label(for="title") Naslov
      input(type="text", id="title", name="title", value="<script>alert('XSS Attack!');</script>")
      label(for="text") Tekst
      textarea(id="text", name="text")
      label Omogući ranjivost
      input(type="checkbox" id="1-vulnerability")
      button(type="submit") Objavi

    script.
      document.getElementById('postForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const title = document.getElementById('title').value;
        const text = document.getElementById('text').value;
        
        if (title && text) {
          const postData = { title, text };
          const vulnerabilityEnabled = document.getElementById('1-vulnerability').checked;
          const vulnerabilityQuery = vulnerabilityEnabled ? 'true' : 'false';

          fetch(`http://127.0.0.1:5000/api/posts?vulnerability=${vulnerabilityQuery}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(postData)
          })
          .then(response => response.json())
          .then(data => {
            if (data.status === 201) {
              console.log('Post created successfully:', data.post);
              document.getElementById('postForm').reset();
            } else {
              console.error('Error creating post:', data.error);
            }
          })
          .catch(error => {
            console.error('Error creating post:', error);
          });
        } else {
          console.log('Please provide both title and text.');
        }
      });

    button#showPosts Prikaži objave

    div#postsPlaceholder

    script.
      document.getElementById('showPosts').addEventListener('click', function() {
        fetch('http://127.0.0.1:5000/api/posts')
          .then(response => response.json())
          .then(data => {
            const postsPlaceholder = document.getElementById('postsPlaceholder');
            while (postsPlaceholder.firstChild) {
              postsPlaceholder.removeChild(postsPlaceholder.firstChild);
            }

            if(data.status === 200) {
              data.data.forEach(post => {
                const postDiv = document.createElement('div');
                const title = document.createElement('h3');
                title.innerHTML = post.title;

                const text = document.createElement('p');
                text.innerHTML = post.text;

                postDiv.appendChild(title);
                postDiv.appendChild(text);

                postsPlaceholder.appendChild(postDiv);
              })
            }
          })
          .catch(error => {
            console.error('Error fetching users:', error);
            const postsPlaceholder = document.getElementById('postsPlaceholder');
            postsPlaceholder.innerHTML = 'Error loading users.';
          });
      });


    hr
    h2 Nesigurna pohrana osjetljivih podataka (Sensitive Data Exposure)
    p Klikom na gumb "Prikaži korisnike" ispisuje se JSON objekt dobiven od servera. Ukoliko omogućimo ranjivost u ispisu možemo vidjeti i lozinku korisnika (u nekom ozbiljnijem slučaju to ne bi bila lozinka već, recimo, broj nečije kreditene kartice). 
    label Omogući ranjivost
      input(type="checkbox" id="2-vulnerability")

    button#showUsers Prikaži korisnike

    div#usersPlaceholder

    script.
      document.getElementById('showUsers').addEventListener('click', function() {
        const vulnerabilityEnabled = document.getElementById('2-vulnerability').checked;
        const vulnerabilityQuery = vulnerabilityEnabled ? 'true' : 'false';
        fetch(`http://127.0.0.1:5000/api/users?vulnerability=${vulnerabilityQuery}`)
          .then(response => response.json())
          .then(data => {
            const usersPlaceholder = document.getElementById('usersPlaceholder');
            usersPlaceholder.innerHTML = '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
          })
          .catch(error => {
            console.error('Error fetching users:', error);
            const usersPlaceholder = document.getElementById('usersPlaceholder');
            usersPlaceholder.innerHTML = 'Error loading users.';
          });
      });